<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wimoor.amazon.orders.mapper.AmzOrderReturnsMapper" >
  <resultMap id="BaseResultMap" type="com.wimoor.amazon.orders.pojo.entity.AmzOrderReturns" >
    <id column="sku" property="sku" jdbcType="CHAR" />
    <id column="return_date" property="returnDate" jdbcType="TIMESTAMP" />
    <id column="order_id" property="orderId" jdbcType="CHAR" />
    <id column="sellerid" property="sellerid" jdbcType="CHAR" />
    <result column="asin" property="asin" jdbcType="CHAR" />
    <result column="fnsku" property="fnsku" jdbcType="CHAR" />
    <result column="quantity" property="quantity" jdbcType="CHAR" />
    <result column="fulfillment_center_id" property="fulfillmentCenterId" jdbcType="CHAR" />
    <result column="detailed_disposition" property="detailedDisposition" jdbcType="CHAR" />
    <result column="reason" property="reason" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="CHAR" />
    <result column="license_plate_number" property="licensePlateNumber" jdbcType="CHAR" />
    <result column="customer_comments" property="customerComments" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    sku, return_date, order_id,sellerid, asin, fnsku, quantity, fulfillment_center_id, detailed_disposition, 
    reason, status, license_plate_number, customer_comments
  </sql>
  <select id="findByOrderIdSku" parameterType="java.util.Map" resultType="java.lang.Integer" >
  	select ifnull(t.quantity,0) quantity  from t_amz_returns_report t where t.sku=#{sku,jdbcType=CHAR}
	and t.order_id=#{orderid,jdbcType=CHAR}
  </select>
 <select id="returnsOrderSum" resultType="java.util.Map">
		 select sum(t.quantity) quantity
		from t_amz_returns_report t
		<where>
		 t.sellerid IN (SELECT a.sellerid FROM  t_amazon_auth a  WHERE  a.shop_id = #{shopid,jdbcType=CHAR}
		   <if test="groupid != null">
				and a.groupid=#{groupid,jdbcType=CHAR}
			</if>
		   )
			<if test="beginDate != null">
				and t.return_date &gt;=#{beginDate,jdbcType=DATE}
			</if>
			<if test="endDate != null">
				and t.return_date &lt;#{endDate,jdbcType=DATE}
			</if>
		</where>	 
 </select>
 <select id="returnsOrder" resultType="java.util.Map">
		 select
		<if test="bytime =='Daily'">
			date_format(t.return_date,'%Y-%m-%d')  return_date,
		</if>
		<if test="bytime =='Weekly'">
			date_format(subdate(return_date, case when date_format(return_date,'%w')=0 then 0 else
			date_format(return_date,'%w') -7 end),'%Y-%m-%d') return_date,
		</if>
		<if test="bytime =='Monthly'">
			concat( year(t.return_date) ,'-' ,month(t.return_date)) return_date,
		</if>
			sum(t.quantity) quantity
		from t_amz_returns_report t
		<where>
		   t.sellerid IN (SELECT a.sellerid FROM  t_amazon_auth a  WHERE  a.shop_id = #{shopid,jdbcType=CHAR}
		   <if test="groupid != null">
				and a.groupid=#{groupid,jdbcType=CHAR}
			</if>
		   )
			<if test="beginDate != null">
				and t.return_date &gt;=#{beginDate,jdbcType=DATE}
			</if>
			<if test="endDate != null">
				and t.return_date &lt;#{endDate,jdbcType=DATE}
			</if>
		</where>
		<if test="bytime =='Daily'">
				group by 	date_format(t.return_date,'%Y-%m-%d')
		</if>
		<if test="bytime =='Weekly'">
			group by date_format(subdate(return_date, case when
			date_format(return_date,'%w')=0 then 0 else
			date_format(return_date,'%w') -7 end),'%Y-%m-%d')
		</if>
		<if test="bytime =='Monthly'">
			group by concat( year(return_date) ,'-' ,month(return_date))
		</if>
 </select>
 
 <select id="selectReturnsList" resultType="com.wimoor.amazon.orders.pojo.vo.AmazonOrdersReturnVo" parameterType="com.wimoor.amazon.orders.pojo.dto.AmazonOrdersReturnDTO">
	 SELECT r.*,d.name detailedDispositionName,rs.name reasonname,s.name statusname,ifnull(p.location,p.url) image,
	        m.name marketname,g.name groupname,i.name,rr.purchase_date  purchaseDate,rr.item_price itemPrice
	 FROM  t_amz_returns_report   r
	 left join t_amazon_auth a on a.sellerid=r.sellerid
	 left join t_orders_report rr on rr.amazon_order_id=r.order_id  and  rr.amazonAuthId=a.id and rr.sku=r.sku
	 LEFT JOIN t_marketplace m ON m.point_name=rr.sales_channel
	 left join t_amazon_group g on g.id=a.groupid
	 left join t_product_info i on i.sku=r.sku and i.marketplaceid=ifnull(m.marketplaceid,r.marketplaceid) and i.amazonauthid=a.id
	 left join t_product_in_opt o on o.pid=i.id
	 left join t_picture p on p.id=i.image
	 LEFT JOIN t_amz_returns_status s ON s.code=r.`status`
	 LEFT JOIN t_amz_returns_reason rs ON rs.code=r.reason
	 LEFT JOIN t_amz_returns_detailed_disposition d ON d.code=r.detailed_disposition
	 WHERE
	 r.return_date >=#{param.startDate,jdbcType=TIMESTAMP}
	 AND r.return_date &lt;=#{param.endDate,jdbcType=TIMESTAMP}
	 AND r.sellerid=#{param.sellerid,jdbcType=CHAR}
	 <if test="param.owner!=null">
		 and o.owner=#{param.owner,jdbcType=CHAR}
	 </if>
	 <if test="param.sku!=null">
		 and r.sku=#{param.sku,jdbcType=CHAR}
	 </if>
	 <if test="param.marketplaceid!=null">
		 and i.marketplaceid=#{param.marketplaceid,jdbcType=CHAR}
	 </if>
	 <if test="param.daytype!=null">
		 <if test="param.daytype=='day30'">
			 and rr.purchase_date &gt;=date_sub(r.return_date,interval 30 day)
		 </if>
		 <if test="param.daytype=='daymore'">
			 and rr.purchase_date &lt;=date_sub(r.return_date,interval 30 day)
		 </if>
	 </if>
	 <if test="param.profit!=null">
		 <if test="param.profit=='profit-yes'">
			 and (  (r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in ( 'QUALITY_UNACCEPTABLE'  ,'MISSING_PARTS' ,'EXTRA_ITEM' ))
			     or (r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in (  'NO_REASON_GIVEN', 'DEFECTIVE', 'UNWANTED_ITEM', 'NOT_COMPATIBLE', 'NOT_AS_DESCRIBED', 'DAMAGED_BY_FC' )
			                                                   and rr.purchase_date  &lt;=date_sub(r.return_date,interval 16 day)
			         )
			     or ((r.detailed_disposition='DEFECTIVE' and r.reason in ('MISSING_PARTS','QUALITY_UNACCEPTABLE'))
			     or  (r.detailed_disposition='DEFECTIVE'
			                                             and r.reason in ('DAMAGED_BY_CARRIER', 'FOUND_BETTER_PRICE', 'DEFECTIVE', 'NO_REASON_GIVEN', 'NOT_AS_DESCRIBED', 'UNWANTED_ITEM', 'NOT_COMPATIBLE', 'DAMAGED_BY_FC')
			                                             and rr.purchase_date  &lt;=date_sub(r.return_date,interval 16 day)
			          )
			       )
			     or r.customer_comments is not null
			    )
		 </if>
		 <if test="param.profit=='profit-no'">
			 and not (
					 (r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in ( 'QUALITY_UNACCEPTABLE'  ,'MISSING_PARTS' ,'EXTRA_ITEM' ))
					 or (r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in ( 'NO_REASON_GIVEN','DEFECTIVE','UNWANTED_ITEM', 'NOT_COMPATIBLE','NOT_AS_DESCRIBED','DAMAGED_BY_FC' )
					    and rr.purchase_date  &lt;=date_sub(r.return_date,interval 16 day)
					 )
					 or ((r.detailed_disposition='DEFECTIVE' and r.reason in ('MISSING_PARTS','QUALITY_UNACCEPTABLE'))
					 or (r.detailed_disposition='DEFECTIVE'  and r.reason in ('DAMAGED_BY_CARRIER','FOUND_BETTER_PRICE','DEFECTIVE', 'NO_REASON_GIVEN','NOT_AS_DESCRIBED','UNWANTED_ITEM', 'NOT_COMPATIBLE','DAMAGED_BY_FC')
					     and rr.purchase_date &lt;=date_sub(r.return_date,interval 16 day)
					 )
					 )
					 or r.customer_comments is not null
			 )
		 </if>
	 </if>
	 <if test="param.issueQuality=='true'">
		 and (r.detailed_disposition='SELLABLE'  and (r.status='Repackaged Successfully' or r.status='Unit returned to inventory'))
	 </if>
	 <if test="param.issueUn=='true'">
		 and (r.detailed_disposition!='SELLABLE' and (r.status='Repackaged Successfully' or r.status='Unit returned to inventory'))
	 </if>
	 <if test="param.issueOther=='true'">
		 and (not (r.status='Repackaged Successfully' or r.status='Unit returned to inventory'))
	 </if>
	 <if test="param.search!=null and param.search!=''">
		 <if test="param.searchtype=='sku'">
			 and r.sku like #{param.search,jdbcType=CHAR}
		 </if>
		 <if test="param.searchtype=='asin'">
			 and r.asin=#{param.search,jdbcType=CHAR}
		 </if>
		 <if test="param.searchtype=='number'">
			 and r.order_id=#{param.search,jdbcType=CHAR}
		 </if>
	 </if>

	</select>

	<select id="selectReturnsListBySKU" resultType="java.util.Map" parameterType="com.wimoor.amazon.orders.pojo.dto.AmazonOrdersReturnDTO">
		select v.*,v.quantity/(select sum(rt.quantity) from t_orders_summary rt where rt.amazonAuthId=v.amazonAuthId
		                                                            and rt.marketplaceid=v.marketplaceid
		                                                            and rt.sku=v.sku
																	and rt.purchase_date >=#{param.startDate,jdbcType=TIMESTAMP}
																	AND rt.purchase_date &lt;=#{param.endDate,jdbcType=TIMESTAMP}
		                                                            ) returnrate
		from (
      SELECT sum(r.quantity) quantity,
		       max(ifnull(m.marketplaceid,r.marketplaceid)) marketplaceid,
		       max(ifnull(p.location,p.url)) image,
		       max(m.name) marketname,
		       max(g.name) groupname,
		       max(i.name) name,
		       sum(rr.item_price) itemPrice,
		       max(r.asin) asin,
		       max(a.id) amazonAuthId,
		       max(rr.sales_channel) sales_channel,
		       max(r.sku) sku,
		       sum(case when r.detailed_disposition='SELLABLE'  and (r.status='Repackaged Successfully' or r.status='Unit returned to inventory') then 1 else 0 end ) sellable,
		       sum(case when r.detailed_disposition!='SELLABLE' and (r.status='Repackaged Successfully' or r.status='Unit returned to inventory') then 1 else 0 end ) unsellable,
		       sum(case when  not (r.status='Repackaged Successfully' or r.status='Unit returned to inventory') then 1 else 0 end ) other,
		       sum(case when  (  (r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in ( 'QUALITY_UNACCEPTABLE'  ,'MISSING_PARTS' ,'EXTRA_ITEM' ))
								or (r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in (  'NO_REASON_GIVEN', 'DEFECTIVE', 'UNWANTED_ITEM', 'NOT_COMPATIBLE', 'NOT_AS_DESCRIBED', 'DAMAGED_BY_FC' )
								and rr.purchase_date  &lt;=date_sub(r.return_date,interval 16 day)
								)
								or ((r.detailed_disposition='DEFECTIVE' and r.reason in ('MISSING_PARTS','QUALITY_UNACCEPTABLE'))
								or  (r.detailed_disposition='DEFECTIVE'
								and r.reason in ('DAMAGED_BY_CARRIER', 'FOUND_BETTER_PRICE', 'DEFECTIVE', 'NO_REASON_GIVEN', 'NOT_AS_DESCRIBED', 'UNWANTED_ITEM', 'NOT_COMPATIBLE', 'DAMAGED_BY_FC')
								and rr.purchase_date  &lt;=date_sub(r.return_date,interval 16 day)
								)
								)
								or r.customer_comments is not null
								)
		       then 1 else 0 end) defective
		FROM  t_amz_returns_report   r
		left join t_amazon_auth a on a.sellerid=r.sellerid
		left join t_orders_report rr on rr.amazon_order_id=r.order_id  and  rr.amazonAuthId=a.id and rr.sku=r.sku
		LEFT JOIN t_marketplace m ON  m.point_name=rr.sales_channel
		left join t_amazon_group g on g.id=a.groupid
		left join t_product_info i on i.sku=r.sku and i.marketplaceid=ifnull(m.marketplaceid,r.marketplaceid) and i.amazonauthid=a.id
		left join t_product_in_opt o on o.pid=i.id
		left join t_picture p on p.id=i.image
		WHERE r.return_date >=#{param.startDate,jdbcType=TIMESTAMP}
		  AND r.return_date &lt;=#{param.endDate,jdbcType=TIMESTAMP}
		  AND r.sellerid=#{param.sellerid,jdbcType=CHAR}
		<if test="param.owner!=null">
			and o.owner=#{param.owner,jdbcType=CHAR}
		</if>
		<if test="param.sku!=null">
			and r.sku=#{param.sku,jdbcType=CHAR}
		</if>
		<if test="param.daytype!=null">
			<if test="param.daytype=='day30'">
                and rr.purchase_date &gt;=date_sub(r.return_date,interval 30 day)
			</if>
			<if test="param.daytype=='daymore'">
				and rr.purchase_date &lt;=date_sub(r.return_date,interval 30 day)
			</if>
		</if>
		<if test="param.profit!=null">
			<if test="param.profit=='profit-yes'">
				and (
				           (r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in ( 'QUALITY_UNACCEPTABLE'  ,'MISSING_PARTS' ,'EXTRA_ITEM' ))
				        or (r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in (  'NO_REASON_GIVEN', 'DEFECTIVE', 'UNWANTED_ITEM', 'NOT_COMPATIBLE', 'NOT_AS_DESCRIBED', 'DAMAGED_BY_FC' )
				                                                    and rr.purchase_date &lt;=date_sub(r.return_date,interval 16 day)
				          )
				        or ((r.detailed_disposition='DEFECTIVE' and r.reason in ('MISSING_PARTS','QUALITY_UNACCEPTABLE'))
						or (r.detailed_disposition='DEFECTIVE'
																and r.reason in ('DAMAGED_BY_CARRIER', 'FOUND_BETTER_PRICE', 'DEFECTIVE', 'NO_REASON_GIVEN', 'NOT_AS_DESCRIBED', 'UNWANTED_ITEM','NOT_COMPATIBLE', 'DAMAGED_BY_FC')
																and rr.purchase_date &lt;=date_sub(r.return_date,interval 16 day)
																)
						)
						or r.customer_comments is not null
				)
			</if>
			<if test="param.profit=='profit-no'">
				and not (
				(r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in ( 'QUALITY_UNACCEPTABLE'  ,'MISSING_PARTS' ,'EXTRA_ITEM' ))
				or (r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in ('NO_REASON_GIVEN', 'DEFECTIVE', 'UNWANTED_ITEM', 'NOT_COMPATIBLE', 'NOT_AS_DESCRIBED', 'DAMAGED_BY_FC' )
				and rr.purchase_date &lt;=date_sub(r.return_date,interval 16 day)
				)
				or ((r.detailed_disposition='DEFECTIVE' and r.reason in ('MISSING_PARTS','QUALITY_UNACCEPTABLE'))
				or (r.detailed_disposition='DEFECTIVE'
				     and r.reason in ('DAMAGED_BY_CARRIER', 'FOUND_BETTER_PRICE', 'DEFECTIVE', 'NO_REASON_GIVEN', 'NOT_AS_DESCRIBED', 'UNWANTED_ITEM', 'NOT_COMPATIBLE', 'DAMAGED_BY_FC')
				     and rr.purchase_date &lt;=date_sub(r.return_date,interval 16 day)
				    )
				)
				or r.customer_comments is not null
				)
			</if>
		</if>
		<if test="param.issueQuality=='true'">
			and (r.detailed_disposition='SELLABLE'  and (r.status='Repackaged Successfully' or r.status='Unit returned to inventory'))
		</if>
		<if test="param.issueUn=='true'">
			and (r.detailed_disposition!='SELLABLE' and (r.status='Repackaged Successfully' or r.status='Unit returned to inventory'))
		</if>
		<if test="param.issueOther=='true'">
			and (not (r.status='Repackaged Successfully' or r.status='Unit returned to inventory'))
		</if>
		<if test="param.search!=null and param.search!=''">
			<if test="param.searchtype=='sku'">
				and r.sku like #{param.search,jdbcType=CHAR}
			</if>
			<if test="param.searchtype=='asin'">
				and r.asin=#{param.search,jdbcType=CHAR}
			</if>
			<if test="param.searchtype=='number'">
				and r.order_id=#{param.search,jdbcType=CHAR}
			</if>
		</if>
		group by r.sellerid,m.marketplaceid,r.sku ) v
	</select>
	<select id="selectReturnsSummaryByDay" resultType="java.util.Map" parameterType="com.wimoor.amazon.orders.pojo.dto.AmazonOrdersReturnDTO">
		SELECT
		    date_format(r.return_date,'%Y-%m-%d') returnDate,
		    sum(r.quantity) quantity,
		    sum(rr.item_price) itemPrice
		FROM  t_amz_returns_report   r
		left join t_amazon_auth a on a.sellerid=r.sellerid
		left join t_orders_report rr on rr.amazon_order_id=r.order_id  and  rr.amazonAuthId=a.id and rr.sku=r.sku
		LEFT JOIN t_marketplace m  ON  m.point_name=rr.sales_channel
		left join t_amazon_group g on g.id=a.groupid
		left join t_product_info i on i.sku=r.sku and i.marketplaceid=ifnull(m.marketplaceid,r.marketplaceid)  and i.amazonauthid=a.id
		left join t_product_in_opt o on o.pid=i.id
		WHERE
		r.return_date >=#{param.startDate,jdbcType=TIMESTAMP}
		AND r.return_date &lt;=#{param.endDate,jdbcType=TIMESTAMP}
		AND r.sellerid=#{param.sellerid,jdbcType=CHAR}
		<if test="param.owner!=null">
			and o.owner=#{param.owner,jdbcType=CHAR}
		</if>
		<if test="param.sku!=null">
			and r.sku=#{param.sku,jdbcType=CHAR}
		</if>
		<if test="param.marketplaceid!=null">
			and i.marketplaceid=#{param.marketplaceid,jdbcType=CHAR}
		</if>
		<if test="param.daytype!=null">
			<if test="param.daytype=='day30'">
				and rr.purchase_date &gt;=date_sub(r.return_date,interval 30 day)
			</if>
			<if test="param.daytype=='daymore'">
				and rr.purchase_date &lt;=date_sub(r.return_date,interval 30 day)
			</if>
		</if>
		<if test="param.profit!=null">
			<if test="param.profit=='profit-yes'">
				and (
				(r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in ( 'QUALITY_UNACCEPTABLE'  ,'MISSING_PARTS' ,'EXTRA_ITEM' ))
				or (r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in (  'NO_REASON_GIVEN', 'DEFECTIVE', 'UNWANTED_ITEM', 'NOT_COMPATIBLE', 'NOT_AS_DESCRIBED', 'DAMAGED_BY_FC' )
				and rr.purchase_date &lt;=date_sub(r.return_date,interval 16 day)
				)
				or ((r.detailed_disposition='DEFECTIVE' and r.reason in ('MISSING_PARTS','QUALITY_UNACCEPTABLE'))
				or (r.detailed_disposition='DEFECTIVE'
				and r.reason in ('DAMAGED_BY_CARRIER', 'FOUND_BETTER_PRICE', 'DEFECTIVE', 'NO_REASON_GIVEN', 'NOT_AS_DESCRIBED', 'UNWANTED_ITEM', 'NOT_COMPATIBLE', 'DAMAGED_BY_FC')
				and rr.purchase_date &lt;=date_sub(r.return_date,interval 16 day)
				)
				)
				or r.customer_comments is not null
				)
			</if>
			<if test="param.profit=='profit-no'">
				and not (
				(r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in ( 'QUALITY_UNACCEPTABLE'  ,'MISSING_PARTS' ,'EXTRA_ITEM' ))
				or (r.detailed_disposition='CUSTOMER_DAMAGED' and r.reason in ('NO_REASON_GIVEN', 'DEFECTIVE', 'UNWANTED_ITEM', 'NOT_COMPATIBLE', 'NOT_AS_DESCRIBED', 'DAMAGED_BY_FC' )
				and rr.purchase_date &lt;=date_sub(r.return_date,interval 16 day)
				)
				or ((r.detailed_disposition='DEFECTIVE' and r.reason in ('MISSING_PARTS','QUALITY_UNACCEPTABLE'))
				or (r.detailed_disposition='DEFECTIVE'
				and r.reason in ('DAMAGED_BY_CARRIER', 'FOUND_BETTER_PRICE', 'DEFECTIVE', 'NO_REASON_GIVEN', 'NOT_AS_DESCRIBED', 'UNWANTED_ITEM', 'NOT_COMPATIBLE', 'DAMAGED_BY_FC')
				and rr.purchase_date &lt;=date_sub(r.return_date,interval 16 day)
				)
				)
				or r.customer_comments is not null
				)
			</if>
		</if>
		<if test="param.issueQuality=='true'">
			and (r.detailed_disposition='SELLABLE'  and (r.status='Repackaged Successfully' or r.status='Unit returned to inventory'))
		</if>
		<if test="param.issueUn=='true'">
			and (r.detailed_disposition!='SELLABLE' and (r.status='Repackaged Successfully' or r.status='Unit returned to inventory'))
		</if>
		<if test="param.issueOther=='true'">
			and (not (r.status='Repackaged Successfully' or r.status='Unit returned to inventory'))
		</if>
		<if test="param.search!=null and param.search!=''">
			<if test="param.searchtype=='sku'">
				and r.sku like #{param.search,jdbcType=CHAR}
			</if>
			<if test="param.searchtype=='asin'">
				and r.asin=#{param.search,jdbcType=CHAR}
			</if>
		</if>
		group by date_format(r.return_date,'%Y-%m-%d')
	</select>

	<select id="selectReturnsSummaryByType"  resultType="java.util.Map" parameterType="com.wimoor.amazon.orders.pojo.dto.AmazonOrdersReturnDTO">
		SELECT  max(rs.name) name,sum(r.quantity) quantity
		FROM  t_amz_returns_report   r
		left join t_amazon_auth a on a.sellerid=r.sellerid
		left join t_orders_report rr on rr.amazon_order_id=r.order_id  and  rr.amazonAuthId=a.id and rr.sku=r.sku
		LEFT JOIN t_marketplace m ON  m.point_name=rr.sales_channel
		left join t_amazon_group g on g.id=a.groupid
		left join t_product_info i on i.sku=r.sku and i.marketplaceid=ifnull(m.marketplaceid,r.marketplaceid)  and i.amazonauthid=a.id
		left join t_product_in_opt o on o.pid=i.id
		LEFT JOIN t_amz_returns_status s ON s.code=r.`status`
		LEFT JOIN t_amz_returns_reason rs ON rs.code=r.reason
		WHERE
		r.return_date >=#{param.startDate,jdbcType=TIMESTAMP}
		AND r.return_date &lt;=#{param.endDate,jdbcType=TIMESTAMP}
		AND r.sellerid=#{param.sellerid,jdbcType=CHAR}
		<if test="param.owner!=null">
			and o.owner=#{param.owner,jdbcType=CHAR}
		</if>
		<if test="param.sku!=null">
			and r.sku=#{param.sku,jdbcType=CHAR}
		</if>
		<if test="param.marketplaceid!=null">
			and i.marketplaceid=#{param.marketplaceid,jdbcType=CHAR}
		</if>
		<if test="param.search!=null and param.search!=''">
			<if test="param.searchtype=='sku'">
				and r.sku like #{param.search,jdbcType=CHAR}
			</if>
			<if test="param.searchtype=='asin'">
				and r.asin=#{param.search,jdbcType=CHAR}
			</if>
			<if test="param.searchtype=='number'">
				and r.order_id=#{param.search,jdbcType=CHAR}
			</if>
		</if>
         group by r.reason
	</select>
	<select id="selectOrderSummaryByDay" resultType="java.util.Map" parameterType="com.wimoor.amazon.orders.pojo.dto.AmazonOrdersReturnDTO">
		SELECT
		date_format(r.purchase_date,'%Y-%m-%d') purchaseDate,
		sum(r.quantity) quantity
		FROM  t_orders_summary   r
		left join t_amazon_auth a on a.id=r.amazonAuthId
		LEFT JOIN t_marketplace m ON  m.marketplaceid=r.marketplaceid
		left join t_amazon_group g on g.id=a.groupid
		left join t_product_info i on i.sku=r.sku and i.marketplaceid=r.marketplaceid  and i.amazonauthid=a.id
		left join t_product_in_opt o on o.pid=i.id
		WHERE
		r.purchase_date >=#{param.startDate,jdbcType=TIMESTAMP}
		AND r.purchase_date &lt;=#{param.endDate,jdbcType=TIMESTAMP}
		AND a.sellerid=#{param.sellerid,jdbcType=CHAR}
		<if test="param.owner!=null">
			and o.owner=#{param.owner,jdbcType=CHAR}
		</if>
		<if test="param.sku!=null">
			and r.sku=#{param.sku,jdbcType=CHAR}
		</if>
		<if test="param.marketplaceid!=null">
			and i.marketplaceid=#{param.marketplaceid,jdbcType=CHAR}
		</if>
		<if test="param.search!=null and param.search!=''">
			<if test="param.searchtype=='sku'">
				and r.sku like #{param.search,jdbcType=CHAR}
			</if>
			<if test="param.searchtype=='asin'">
				and r.asin=#{param.search,jdbcType=CHAR}
			</if>
		</if>
		group by date_format(r.purchase_date,'%Y-%m-%d')
	</select>

	<select id="getBySellerId" resultType="java.util.Map" parameterType="java.lang.String">
		SELECT r.sku,c.sales_channel,SUM(r.quantity) qty,count(distinct r.order_id) num FROM  t_amz_returns_report r
		 LEFT JOIN  t_orders_report c ON c.amazon_order_id=r.order_id AND c.sku=r.sku
		WHERE sellerid=#{sellerid,jdbcType=CHAR} AND return_date>=date_sub(current_date(),interval 30 day)
		GROUP BY r.sku,c.sales_channel
	</select>
</mapper>